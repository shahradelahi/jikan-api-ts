import fs from 'node:fs';

let content = fs.readFileSync('./src/autogenerated.types.ts', 'utf-8');
Array.from({ length: 3 }).forEach(() => {
  content = content.replaceAll(/$\s+[\w_]+\?:(:?[{/*\s\w]+)?.*;?$/gim, (v) => {
    // console.log(v);
    if (
      v.includes('?: Parameters.') ||
      v.includes('Parameters<') ||
      v.includes('    data?: any,') ||
      v.includes('config?: AxiosRequestConfig')
    ) {
      return v;
    }
    return v.replace('?:', ':');
  });
});

content = content.replace(
  `\
import type {
  OpenAPIClient,
  Parameters,
  UnknownParamsObject,
  OperationResponse,
  AxiosRequestConfig,
} from 'openapi-client-axios';`,
  `\
import type { Parameters, UnknownParamsObject, UnknownOperationMethods, UnknownPathsDictionary, OpenAPIClientAxios } from 'openapi-client-axios';
import type { CacheAxiosResponse as AxiosResponse, CacheRequestConfig as AxiosRequestConfig, AxiosCacheInstance as AxiosInstance } from 'axios-cache-interceptor';

type OpenAPIClient<OperationMethods = UnknownOperationMethods, PathsDictionary = UnknownPathsDictionary> = AxiosInstance & OperationMethods & {
    api: OpenAPIClientAxios;
    paths: PathsDictionary;
};

type OperationResponse<Response> = Promise<AxiosResponse<Response>>;`
);

content += content
  .match(/namespace Schemas \{([\w\s\n{}*|"-;[\]=<>`!?]+)^\s{4}}\n}\ndeclare/gm)![0]
  .match(/export interface (\w+) \{/gm)!
  .map((v) => v.replace(/export interface (\w+) \{/, '$1'))
  .map((v) => `export type ${v} = Components.Schemas.${v};`)
  .join('\n');

fs.writeFileSync('./src/autogenerated.types.ts', content);

// [\s\w/*{\n]+([\w_]+\?:(:?[{/*\s\w]+)?.*;)
